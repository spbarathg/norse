generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Era {
  id                   String  @id
  name                 String
  startIgTs            String
  endIgTs              String?
  visualId             String
  decayModifier        Float   @default(1)
  evoCeilingModifier   Float   @default(1)
  specialFlags         String?

  relics               Relic[]
}

model Relic {
  id                 String   @id
  characterId        Int
  ownerUserId        String
  originUserId       String
  eraId              String
  rarity             String
  birthIgTs          String
  birthRealTs        DateTime @default(now())
  durabilityPct      Float    @default(100)
  xp                 Int      @default(0)
  evolutionStage     String   @default("Dormant")
  currentStats       String   // JSON as String for SQLite
  isShadowborn       Boolean  @default(false)
  rebirthIgTs        String?
  history            String   @default("[]") // JSON as String for SQLite
  lastDecayTick      DateTime @default(now())
  preservationExpiry DateTime?
  metadata           String? // JSON as String for SQLite
  isLocked           Boolean  @default(false)
  missionLockId      String?

  era                Era      @relation(fields: [eraId], references: [id])

  @@index([ownerUserId])
  @@index([durabilityPct])
  @@index([eraId])
  @@index([rarity])
}

model User {
  userId     String  @id
  discordId  String  @unique
  gold       Int     @default(0)
  materials  String  @default("{}") // JSON as String for SQLite
  currencies String  @default("{}") // JSON as String: { gacha_coins, mythic_essence, ... }
  lastDailyClaimAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Mission {
  id             String    @id @default(cuid())
  ownerUserId    String
  relicIds       String    // JSON array as String for SQLite
  missionType    String
  startRealTs    DateTime  @default(now())
  endRealTs      DateTime
  rewardPayload  String    // JSON as String for SQLite
  status         String     @default("active") // active | ready | claimed | canceled
  claimedAt      DateTime?

  @@index([ownerUserId])
  @@index([status])
}

model MarketListing {
  id           String   @id @default(cuid())
  sellerUserId String
  buyerUserId  String?
  relicId      String   @unique
  priceGold    Int
  createdTs    DateTime @default(now())
  status       String   @default("active") // active | sold | canceled
  viewCount    Int      @default(0)

  @@index([status])
}

model Event {
  id            String   @id @default(cuid())
  type          String
  payload       String   // JSON as String for SQLite
  scheduledIgTs String
  status        String
}

model TradeOffer {
  id               String   @id @default(cuid())
  initiatorUserId  String
  targetUserId     String
  status           String   @default("pending") // pending | accepted | cancelled | expired | completed
  offerType        String   // direct | open | counteroffer
  
  // What initiator is offering
  offeredRelicIds  String   @default("[]") // JSON array as String
  offeredGold      Int      @default(0)
  offeredMaterials String   @default("{}") // JSON as String
  
  // What initiator wants in return
  requestedRelicIds String  @default("[]") // JSON array as String  
  requestedGold     Int     @default(0)
  requestedMaterials String @default("{}") // JSON as String
  
  // Trade metadata
  message          String?  // Optional message from trader
  parentOfferId    String?  // For counteroffers
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  completedAt      DateTime?
  
  // Security
  escrowLocked     Boolean  @default(false)
  
  @@index([initiatorUserId])
  @@index([targetUserId])
  @@index([status])
  @@index([createdAt])
}

model TradeHistory {
  id            String   @id @default(cuid())
  tradeOfferId  String
  user1Id       String
  user2Id       String
  
  // What was exchanged
  user1Gave     String   // JSON with relics, gold, materials
  user2Gave     String   // JSON with relics, gold, materials
  
  completedAt   DateTime @default(now())
  tradeValue    Int      @default(0) // Estimated total value in gold
  
  @@index([user1Id])
  @@index([user2Id])
  @@index([completedAt])
} 